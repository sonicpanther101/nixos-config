// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/gtk3/index.ts
import Astal7 from "gi://Astal?version=3.0";
import Gtk4 from "gi://Gtk?version=3.0";
import Gdk from "gi://Gdk?version=3.0";

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/gtk3/astalify.ts
import Astal4 from "gi://Astal?version=3.0";
import Gtk from "gi://Gtk?version=3.0";
import GObject from "gi://GObject";

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/process.ts
import Astal from "gi://AstalIO";
var { Process } = Astal;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal.Process.subprocessv(cmd) : Astal.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/time.ts
import Astal2 from "gi://AstalIO";
var { Time } = Astal2;
function interval(interval2, callback) {
  return Astal2.Time.interval(interval2, () => void callback?.());
}

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = Binding.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec === "function") {
      this.pollFn = exec;
      delete this.pollExec;
    } else {
      this.pollExec = exec;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var variable_default = Variable;

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/gtk3/astalify.ts
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof Binding ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof Binding);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function astalify(cls) {
  class Widget2 extends cls {
    get css() {
      return Astal4.widget_get_css(this);
    }
    set css(css) {
      Astal4.widget_set_css(this, css);
    }
    get_css() {
      return this.css;
    }
    set_css(css) {
      this.css = css;
    }
    get className() {
      return Astal4.widget_get_class_names(this).join(" ");
    }
    set className(className) {
      Astal4.widget_set_class_names(this, className.split(/\s+/));
    }
    get_class_name() {
      return this.className;
    }
    set_class_name(className) {
      this.className = className;
    }
    get cursor() {
      return Astal4.widget_get_cursor(this);
    }
    set cursor(cursor) {
      Astal4.widget_set_cursor(this, cursor);
    }
    get_cursor() {
      return this.cursor;
    }
    set_cursor(cursor) {
      this.cursor = cursor;
    }
    get clickThrough() {
      return Astal4.widget_get_click_through(this);
    }
    set clickThrough(clickThrough) {
      Astal4.widget_set_click_through(this, clickThrough);
    }
    get_click_through() {
      return this.clickThrough;
    }
    set_click_through(clickThrough) {
      this.clickThrough = clickThrough;
    }
    get noImplicitDestroy() {
      return this.__no_implicit_destroy;
    }
    set noImplicitDestroy(value) {
      this.__no_implicit_destroy = value;
    }
    _setChildren(children) {
      children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
      if (this instanceof Gtk.Bin) {
        const ch = this.get_child();
        if (ch)
          this.remove(ch);
        if (ch && !children.includes(ch) && !this.noImplicitDestroy)
          ch?.destroy();
      } else if (this instanceof Gtk.Container) {
        for (const ch of this.get_children()) {
          this.remove(ch);
          if (!children.includes(ch) && !this.noImplicitDestroy)
            ch?.destroy();
        }
      }
      if (this instanceof Astal4.Box) {
        this.set_children(children);
      } else if (this instanceof Astal4.Stack) {
        this.set_children(children);
      } else if (this instanceof Astal4.CenterBox) {
        this.startWidget = children[0];
        this.centerWidget = children[1];
        this.endWidget = children[2];
      } else if (this instanceof Astal4.Overlay) {
        const [child, ...overlays] = children;
        this.set_child(child);
        this.set_overlays(overlays);
      } else if (this instanceof Gtk.Container) {
        for (const ch of children)
          this.add(ch);
      } else {
        throw Error(`can not add children to ${this.constructor.name}, it is not a container widget`);
      }
    }
    toggleClassName(cn, cond = true) {
      Astal4.widget_toggle_class_name(this, cn, cond);
    }
    hook(object, signalOrCallback, callback) {
      if (typeof object.connect === "function" && callback) {
        const id = object.connect(signalOrCallback, (_, ...args) => {
          callback(this, ...args);
        });
        this.connect("destroy", () => {
          object.disconnect(id);
        });
      } else if (typeof object.subscribe === "function" && typeof signalOrCallback === "function") {
        const unsub = object.subscribe((...args) => {
          signalOrCallback(this, ...args);
        });
        this.connect("destroy", unsub);
      }
      return this;
    }
    constructor(...params) {
      super();
      const [config] = params;
      const { setup, child, children = [], ...props } = config;
      props.visible ??= true;
      if (child)
        children.unshift(child);
      const bindings = Object.keys(props).reduce((acc, prop) => {
        if (props[prop] instanceof Binding) {
          const binding = props[prop];
          delete props[prop];
          return [...acc, [prop, binding]];
        }
        return acc;
      }, []);
      const onHandlers = Object.keys(props).reduce((acc, key) => {
        if (key.startsWith("on")) {
          const sig = kebabify(key).split("-").slice(1).join("-");
          const handler = props[key];
          delete props[key];
          return [...acc, [sig, handler]];
        }
        return acc;
      }, []);
      const mergedChildren = mergeBindings(children.flat(Infinity));
      if (mergedChildren instanceof Binding) {
        this._setChildren(mergedChildren.get());
        this.connect("destroy", mergedChildren.subscribe((v) => {
          this._setChildren(v);
        }));
      } else {
        if (mergedChildren.length > 0) {
          this._setChildren(mergedChildren);
        }
      }
      for (const [signal, callback] of onHandlers) {
        if (typeof callback === "function") {
          this.connect(signal, callback);
        } else {
          this.connect(signal, () => execAsync(callback).then(print).catch(console.error));
        }
      }
      for (const [prop, binding] of bindings) {
        if (prop === "child" || prop === "children") {
          this.connect("destroy", binding.subscribe((v) => {
            this._setChildren(v);
          }));
        }
        this.connect("destroy", binding.subscribe((v) => {
          setProp(this, prop, v);
        }));
        setProp(this, prop, binding.get());
      }
      Object.assign(this, props);
      setup?.(this);
    }
  }
  GObject.registerClass({
    GTypeName: `Astal_${cls.name}`,
    Properties: {
      "class-name": GObject.ParamSpec.string(
        "class-name",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "css": GObject.ParamSpec.string(
        "css",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "cursor": GObject.ParamSpec.string(
        "cursor",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        "default"
      ),
      "click-through": GObject.ParamSpec.boolean(
        "click-through",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      ),
      "no-implicit-destroy": GObject.ParamSpec.boolean(
        "no-implicit-destroy",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      )
    }
  }, Widget2);
  return Widget2;
}

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/gtk3/app.ts
import Gtk2 from "gi://Gtk?version=3.0";
import Astal5 from "gi://Astal?version=3.0";

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject2 from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject2.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_message(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/gtk3/app.ts
Gtk2.init(null);
var app_default = mkApp(Astal5.Application);

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/gtk3/widget.ts
import Astal6 from "gi://Astal?version=3.0";
import Gtk3 from "gi://Gtk?version=3.0";
import GObject3 from "gi://GObject";
Object.defineProperty(Astal6.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = class extends astalify(Astal6.Box) {
  static {
    GObject3.registerClass({ GTypeName: "Box" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var Button = class extends astalify(Astal6.Button) {
  static {
    GObject3.registerClass({ GTypeName: "Button" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var CenterBox = class extends astalify(Astal6.CenterBox) {
  static {
    GObject3.registerClass({ GTypeName: "CenterBox" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var CircularProgress = class extends astalify(Astal6.CircularProgress) {
  static {
    GObject3.registerClass({ GTypeName: "CircularProgress" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var DrawingArea = class extends astalify(Gtk3.DrawingArea) {
  static {
    GObject3.registerClass({ GTypeName: "DrawingArea" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Entry = class extends astalify(Gtk3.Entry) {
  static {
    GObject3.registerClass({ GTypeName: "Entry" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var EventBox = class extends astalify(Astal6.EventBox) {
  static {
    GObject3.registerClass({ GTypeName: "EventBox" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Icon = class extends astalify(Astal6.Icon) {
  static {
    GObject3.registerClass({ GTypeName: "Icon" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Label = class extends astalify(Astal6.Label) {
  static {
    GObject3.registerClass({ GTypeName: "Label" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var LevelBar = class extends astalify(Astal6.LevelBar) {
  static {
    GObject3.registerClass({ GTypeName: "LevelBar" }, this);
  }
  constructor(props) {
    super(props);
  }
};
Object.defineProperty(Astal6.Overlay.prototype, "overlays", {
  get() {
    return this.get_overlays();
  },
  set(v) {
    this.set_overlays(v);
  }
});
var Overlay = class extends astalify(Astal6.Overlay) {
  static {
    GObject3.registerClass({ GTypeName: "Overlay" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var Revealer = class extends astalify(Gtk3.Revealer) {
  static {
    GObject3.registerClass({ GTypeName: "Revealer" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Scrollable = class extends astalify(Astal6.Scrollable) {
  static {
    GObject3.registerClass({ GTypeName: "Scrollable" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Slider = class extends astalify(Astal6.Slider) {
  static {
    GObject3.registerClass({ GTypeName: "Slider" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Stack = class extends astalify(Astal6.Stack) {
  static {
    GObject3.registerClass({ GTypeName: "Stack" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var Switch = class extends astalify(Gtk3.Switch) {
  static {
    GObject3.registerClass({ GTypeName: "Switch" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Window = class extends astalify(Astal6.Window) {
  static {
    GObject3.registerClass({ GTypeName: "Window" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};

// sass:/home/adam/nixos-config/modules/home/ags/new ags/style.scss
var style_default = '* {\n  margin: 0;\n  padding: 0;\n  border: none;\n  border-radius: 0;\n  min-height: 0;\n  font-family: "JetBrainsMono Nerd Font";\n  font-weight: bold;\n  opacity: 0.98;\n  background-image: none;\n  box-shadow: none;\n  text-shadow: none;\n}\n\ntooltip {\n  border-radius: 999px;\n  background-color: #212132;\n}\ntooltip label {\n  color: rgb(180, 190, 254);\n  font-weight: bold;\n}\n\nwindow.Bar {\n  border: none;\n  box-shadow: none;\n  background-color: transparent;\n  color: rgb(205, 214, 244);\n  font-size: 1.1em;\n  font-weight: bold;\n  transition: 200ms ease-in-out;\n  font-family: "JetBrainsMono Nerd Font";\n  margin: 0;\n  padding: 0;\n  border-radius: 0;\n}\nwindow.Bar .StartButton {\n  font-size: 20px;\n  font-weight: bold;\n  padding-left: 5px;\n  padding-right: 15px;\n  margin-right: 25px;\n  background-color: rgba(180, 190, 254, 0.15);\n  border-bottom-right-radius: 0.8em;\n}\nwindow.Bar .Workspaces {\n  background-color: rgba(180, 190, 254, 0.15);\n  border-radius: 999px;\n}\nwindow.Bar .Workspaces button {\n  background-color: transparent;\n  border-radius: 999px;\n  padding-left: 8px;\n  padding-right: 8px;\n}\nwindow.Bar .Workspaces button:hover {\n  background-color: rgba(180, 190, 254, 0.15);\n}\nwindow.Bar .Workspaces button label {\n  padding-top: 2px;\n  color: rgb(108, 112, 134);\n}\nwindow.Bar .Workspaces .occupied label {\n  color: rgb(205, 214, 244);\n}\nwindow.Bar .Workspaces .active {\n  background-color: rgba(180, 190, 254, 0.15);\n}\nwindow.Bar .Workspaces .active label {\n  color: rgb(180, 190, 254);\n}\nwindow.Bar .FocusedClient {\n  color: rgb(180, 190, 254);\n}\nwindow.Bar .Time {\n  background-color: rgba(180, 190, 254, 0.15);\n  border-bottom-left-radius: 0.8em;\n  border-bottom-right-radius: 0.8em;\n  padding: 0 0.8em;\n}\nwindow.Bar .Study {\n  background-color: rgba(180, 190, 254, 0.15);\n  border-radius: 999px;\n  margin-left: 1em;\n  padding: 0 0.5em;\n}\nwindow.Bar .Right {\n  background-color: rgba(180, 190, 254, 0.15);\n  margin-left: 2em;\n  border-bottom-left-radius: 999px;\n  border-top-left-radius: 999px;\n}\nwindow.Bar .Media {\n  padding-left: 0.8em;\n  padding-right: 0.5em;\n  background-color: transparent;\n  border-radius: 999px;\n}\nwindow.Bar .Media .Cover {\n  margin-left: 0.2em;\n  margin-top: 2px;\n  min-height: 1.2em;\n  min-width: 1.2em;\n  background-position: center;\n  background-size: contain;\n}\nwindow.Bar .Audio {\n  padding-left: 0.4em;\n  border-radius: 999px;\n  background-color: transparent;\n}\nwindow.Bar .Wifi {\n  padding-left: 0.8em;\n}\nwindow.Bar .Battery label {\n  padding-left: 0;\n  margin-left: 0;\n}\nwindow.Bar .SysTray {\n  padding-left: 0.8em;\n}\nwindow.Bar .SysTray .TrayItem {\n  all: unset;\n  background-color: transparent;\n  min-width: 1em;\n  min-height: 1em;\n  padding: 0.2em;\n}';

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/file.ts
import Astal8 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/gobject.ts
import GObject4 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject4;

// widget/Bar.tsx
import Mpris from "gi://AstalMpris";
import Hyprland from "gi://AstalHyprland";
import Battery from "gi://AstalBattery";
import Wp from "gi://AstalWp";
import AstalTray from "gi://AstalTray";

// ../../../../../../../nix/store/ii2w7wv88fjvmldn8kzz8ni20kzpkld4-astal-gjs/share/astal/gjs/gtk3/jsx-runtime.ts
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    return new ctors[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  circularprogress: CircularProgress,
  drawingarea: DrawingArea,
  entry: Entry,
  eventbox: EventBox,
  // TODO: fixed
  // TODO: flowbox
  icon: Icon,
  label: Label,
  levelbar: LevelBar,
  // TODO: listbox
  overlay: Overlay,
  revealer: Revealer,
  scrollable: Scrollable,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window
};
var jsxs = jsx;

// widget/Bar.tsx
function StartButton() {
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: "StartButton",
      onClicked: () => {
        studyMode.set(!studyMode.get());
        if (studyMode.get()) {
          studyPaused.set(false);
          timeLeftStudying = 31;
          studying.set(true);
        }
      },
      children: /* @__PURE__ */ jsx("label", { label: "\uF313" })
    }
  );
}
var tray = AstalTray.get_default();
var TrayItem = (id, item) => {
  const menu = item.create_menu();
  const onClick = (_, e) => {
    if (e.button === Gdk.BUTTON_PRIMARY) {
      item.activate(Gdk.Screen.width() / 2, Gdk.Screen.height() / 2);
    } else if (e.button === Gdk.BUTTON_SECONDARY) {
      menu?.popup_at_pointer(null);
    } else if (e.button === Gdk.BUTTON_MIDDLE) {
      item.secondary_activate(Gdk.Screen.width() / 2, Gdk.Screen.height() / 2);
    }
  };
  return /* @__PURE__ */ jsx("button", { name: id, className: "TrayItem", onClick, children: /* @__PURE__ */ jsx(
    "icon",
    {
      icon: bind(item, "iconName").as((name) => name ?? ""),
      pixbuf: bind(item, "iconPixbuf")
    }
  ) });
};
var SysTray = () => {
  let itemAddedId = null;
  let itemRemovedId = null;
  const setup = (self) => {
    self.children = tray.get_items().map((item) => TrayItem(item.itemId, item));
    itemAddedId = tray.connect(
      "item-added",
      (_, itemId) => self.add(TrayItem(itemId, tray.get_item(itemId)))
    );
    itemRemovedId = tray.connect("item-removed", (_, itemId) => {
      const widget = self.children.find((w) => w.name === itemId);
      widget?.destroy();
    });
  };
  const onDestroy = () => {
    if (itemAddedId) {
      tray.disconnect(itemAddedId);
    }
    if (itemRemovedId) {
      tray.disconnect(itemRemovedId);
    }
  };
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "SysTray",
      orientation: Gtk4.Orientation.VERTICAL,
      spacing: 8,
      setup,
      onDestroy
    }
  );
};
function Audio() {
  const speaker = Wp.get_default()?.audio.defaultSpeaker;
  const onClick = (_, e) => {
    if (e.button === Gdk.BUTTON_PRIMARY) {
      speaker.set_mute(!speaker.mute);
    } else if (e.button === Gdk.BUTTON_SECONDARY) {
      execAsync(["pavucontrol"]).catch((err) => console.error(err));
    }
  };
  const onScroll = (_, e) => {
    let direction = null;
    if (e.direction == Gdk.ScrollDirection.SMOOTH) {
      direction = Math.sign(e.delta_y);
    } else if (e.direction == Gdk.ScrollDirection.UP) {
      direction = 1;
    } else if (e.direction == Gdk.ScrollDirection.DOWN) {
      direction = -1;
    }
    if (direction === null) return;
    speaker.set_volume(Math.min(1, Math.max(0, Math.round(speaker.get_volume() * 20) / 20 - direction * 0.05)));
  };
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: "Audio",
      onClick,
      onScroll,
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx("icon", { icon: bind(speaker, "volumeIcon") }),
        /* @__PURE__ */ jsx("label", { label: bind(speaker, "volume").as((p) => ` ${Math.round(p * 20) * 5}%`) })
      ] })
    }
  );
}
function BatteryLevel() {
  const bat = Battery.get_default();
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "Battery",
      visible: bind(bat, "isPresent"),
      children: [
        /* @__PURE__ */ jsx("icon", { icon: bind(bat, "batteryIconName") }),
        /* @__PURE__ */ jsx("label", { label: bind(bat, "percentage").as(
          (p) => `${Math.floor(p * 100)} %`
        ) })
      ]
    }
  );
}
function Media() {
  const mpris = Mpris.get_default();
  const onScroll = (_, e, player) => {
    let direction = null;
    if (e.direction == Gdk.ScrollDirection.SMOOTH) {
      direction = Math.sign(e.delta_y);
    } else if (e.direction == Gdk.ScrollDirection.UP) {
      direction = 1;
    } else if (e.direction == Gdk.ScrollDirection.DOWN) {
      direction = -1;
    }
    if (direction === 1) {
      player.previous();
    } else if (direction === -1) {
      player.next();
    }
  };
  return /* @__PURE__ */ jsx("box", { children: bind(mpris, "players").as((ps) => ps[0] ? /* @__PURE__ */ jsx(
    "button",
    {
      onClicked: () => ps[0].play_pause(),
      onScroll: (_, e) => onScroll(_, e, ps[0]),
      className: "Media",
      visible: bind(ps[0], "title").as(Boolean),
      css: bind(Variable.derive(
        [bind(ps[0], "position").as(Number), bind(ps[0], "length").as(Number)],
        (p, l) => {
          if (l === 0 || p === 0 || p / l === Infinity) {
            return "";
          } else {
            return `background: linear-gradient(90deg, rgba(0,0,0,0.7) ${100 * p / l}%, rgba(0,0,0,0) ${100 * p / l + 10}%);`;
          }
        }
      )),
      children: /* @__PURE__ */ jsxs(
        "box",
        {
          tooltipText: bind(ps[0], "album").as(String),
          children: [
            /* @__PURE__ */ jsx(
              "label",
              {
                label: bind(Variable.derive(
                  [bind(ps[0], "title").as(String), bind(ps[0], "artist").as(String), bind(ps[0], "playbackStatus").as(Boolean)],
                  (t, a, p) => {
                    return `${p ? "\uF04B " : "\uF04C "}${t}${a ? " - " : ""}${a}`;
                  }
                )),
                truncate: true
              }
            ),
            /* @__PURE__ */ jsx(
              "box",
              {
                className: "Cover",
                valign: Gtk4.Align.CENTER,
                css: bind(ps[0], "coverArt").as((cover) => `background-image: url('${cover}');`)
              }
            )
          ]
        }
      )
    }
  ) : "") });
}
function Workspaces({ monitor }) {
  const hyprland = Hyprland.get_default();
  const currentWorkspace = () => hyprland.get_focused_workspace().get_id();
  return /* @__PURE__ */ jsx("box", { className: "Workspaces", children: Array.from({ length: 10 }, (_, i) => i + (monitor.model === "HP P232" ? 1 : 11)).map((id) => /* @__PURE__ */ jsx(
    "button",
    {
      setup: (self) => {
        self.hook(hyprland, "event", (self2) => {
          self2.toggleClassName("active", id === currentWorkspace());
          self2.toggleClassName("occupied", hyprland.get_workspace(id)?.get_clients().length > 0);
        });
      },
      onClicked: () => hyprland.get_focused_workspace().get_id() != id ? hyprland.dispatch("workspace", `${id}`) : null,
      halign: Gtk4.Align.CENTER,
      children: /* @__PURE__ */ jsx(
        "label",
        {
          label: bind(hyprland, "focusedWorkspace").as((fw) => fw && fw.id === id ? "\u25CF" : `${id}`)
        }
      )
    }
  )) });
}
var time = Variable("").poll(
  1e4,
  () => default2.DateTime.new_now_local().format("\uF017 %l:%M %p")
);
function Time2({ dateFormat = "\uF073 %A the %eblank of %B", dayFormat = "%e" }) {
  const nth = (d) => {
    if (d > 3 && d < 21) return "th";
    switch (d % 10) {
      case 1:
        return "st";
      case 2:
        return "nd";
      case 3:
        return "rd";
      default:
        return "th";
    }
  };
  const day = Variable(3).poll(
    6e4,
    () => parseInt(default2.DateTime.new_now_local().format(dayFormat))
  );
  const date = Variable("").poll(
    6e4,
    () => default2.DateTime.new_now_local().format(dateFormat).replace("blank", nth(day().get()))
  );
  return /* @__PURE__ */ jsx(
    "label",
    {
      tooltipText: date(),
      className: "Time",
      onDestroy: () => time.drop(),
      label: time()
    }
  );
}
var studyMode = Variable(false);
var studyPaused = Variable(true);
var studying = Variable(false);
var timeLeftStudying = 31;
var studyLabel = Variable.derive(
  [studyPaused, time, studying],
  (a, b, c) => `${a ? "Study" : "Stop"} ${b} ${c ? "\uF04B" : "\uF04C"}`
);
var studyCycle = 0;
function Study({ monitor }) {
  const mpris = Mpris.get_default();
  const onClick = (_, e) => {
    if (e.button === Gdk.BUTTON_PRIMARY) {
      timeLeftStudying = studying.get() ? studyCycle % 4 ? 11 : 6 : 31;
      ++studyCycle;
      studying.set(!studying.get());
    } else if (e.button === Gdk.BUTTON_SECONDARY) {
      studyPaused.set(!studyPaused.get());
      timeLeftStudying += studyPaused.get() ? 1 : 0;
    }
  };
  const player = bind(mpris, "players").as((ps) => ps[0]);
  return /* @__PURE__ */ jsx(
    "button",
    {
      visible: studyMode((a) => a),
      className: "Study",
      onClick,
      children: /* @__PURE__ */ jsx(
        "label",
        {
          label: studyLabel((studyLabel2) => {
            if (monitor.model === "HP P240va") return `${studyPaused.get() ? "\uF04B " : ""}${studying.get() ? "\uF494" : "\uF11B\u2009"} ${studying.get() ? timeLeftStudying : studyCycle % 4 ? timeLeftStudying : timeLeftStudying}m`;
            timeLeftStudying -= studyPaused.get() || !studyMode.get() ? 0 : 1;
            if (timeLeftStudying <= 0 && studyMode.get()) {
              studying.set(!studying.get());
              timeLeftStudying = studying.get() ? 31 : studyCycle % 4 ? 11 : 6;
              ++studyCycle;
              execAsync(["bash", "-c", `notify-send -e "${studying.get() ? "Start Studying" : studyCycle % 4 ? "Get Up" : "Start Break"}" --icon=${studying.get() ? "easy-ebook-viewer" : studyCycle % 4 ? "emoji-food-symbolic" : "applications-games-symbolic"}`]).catch((err) => console.error(err));
              player.get().play_pause();
            }
            return `${studyPaused.get() ? "\uF04B " : ""}${studying.get() ? "\uF494" : "\uF11B\u2009"} ${studying.get() ? timeLeftStudying : studyCycle % 4 ? timeLeftStudying : timeLeftStudying}m`;
          }),
          className: "study"
        }
      )
    }
  );
}
function Bar(monitor) {
  const anchor = Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.LEFT | Astal7.WindowAnchor.RIGHT;
  return /* @__PURE__ */ jsx(
    "window",
    {
      className: "Bar",
      gdkmonitor: monitor,
      exclusivity: Astal7.Exclusivity.EXCLUSIVE,
      anchor,
      children: /* @__PURE__ */ jsxs("centerbox", { children: [
        /* @__PURE__ */ jsxs("box", { hexpand: true, halign: Gtk4.Align.START, children: [
          /* @__PURE__ */ jsx(StartButton, {}),
          /* @__PURE__ */ jsx(Workspaces, { monitor })
        ] }),
        /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx(Time2, {}),
          /* @__PURE__ */ jsx(Study, { monitor })
        ] }),
        /* @__PURE__ */ jsxs("box", { hexpand: true, halign: Gtk4.Align.END, className: "Right", children: [
          /* @__PURE__ */ jsx(Media, {}),
          /* @__PURE__ */ jsx(Audio, {}),
          /* @__PURE__ */ jsx(BatteryLevel, {}),
          /* @__PURE__ */ jsx(SysTray, {})
        ] })
      ] })
    }
  );
}

// app.ts
app_default.start({
  css: style_default,
  instanceName: "js",
  requestHandler(request, res) {
    print(request);
    res("ok");
  },
  main: () => app_default.get_monitors().map(Bar)
});
